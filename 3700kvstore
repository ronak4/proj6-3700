#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os

BROADCAST = "FFFF"


class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.database = {}
        self.leader = "FFFF"
        self.state = "follower"

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        print("Replica %s starting up" % self.id, flush=True)
        hello = {"src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello"}
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    def redirect(self, message):
        redirect = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "redirect", "MID": message["MID"]}
        self.send(redirect)

    def handle_put(self, message):
        try:
            if self.state != "leader" and message["src"] != self.leader:
                self.redirect(message)
            key = message["key"]
            value = message["value"]
            self.database[key] = value
            #ok = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "ok", "MID": message["MID"]}
            #self.send(ok)
            fail = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "fail", "MID": message["MID"]}
            self.send(fail)
        except Exception as e:
            print("incorrect format of put message")
            print(e)
            fail = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "fail", "MID": message["MID"]}
            self.send(fail)

    def handle_get(self, mesage):
        try:
            if self.state != "leader" and message["src"] != self.leader:
                self.redirect(message)
            key = message["key"]
            value = self.database.get(key)
            if value is None:
                value = ""
            #ok = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "ok", "MID": message["MID"], 
            #"value": value}
            #self.send(ok)
            fail = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "fail", "MID": message["MID"]}
            self.send(fail)
        except Exception as e:
            print("incorrect format of get message")
            print(e)
            fail = {"src": self.id, "dst": message["src"], "leader": self.leader, "type": "fail", "MID": message["MID"]}
            self.send(fail)

    def run(self):
        while True:
            data, addr = self.socket.recvfrom(65535)
            msg = data.decode('utf-8')
            # meh
            print("Received message '%s'" % (msg,), flush=True)
            message = json.loads(msg)
            print(message)

            msg_type = message["type"]
            if msg_type == "put":
                self.handle_put(message)
            elif msg_type == "get":
                self.handle_get(message)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
